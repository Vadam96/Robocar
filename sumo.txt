import RPi.GPIO as GPIO 
import time

# Sensor Pins

left = 4
middle = 17
right = 27
sonarout = 23
sonarin = 24

# Left Motor

ain1 = 16
ain2 = 20
pwma = 21

# Right Motor

bin1 = 26
bin2 = 19
pwmb = 13

# GPIO general

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

# GPIO Left Motor

GPIO.setup(ain1, GPIO.OUT)
GPIO.setup(ain2, GPIO.OUT)
GPIO.setup(pwma, GPIO.OUT)
leftmotor = GPIO.PWM(pwma, 50)

# GPIO Right Motor

GPIO.setup(bin1, GPIO.OUT)
GPIO.setup(bin2, GPIO.OUT)
GPIO.setup(pwmb, GPIO.OUT)
rightmotor = GPIO.PWM(pwmb, 50)

# GPIO sensors

GPIO.setup(left, GPIO.IN)
GPIO.setup(middle, GPIO.IN)
GPIO.setup(right, GPIO.IN)
GPIO.setup(sonarout, GPIO.OUT)
GPIO.setup(sonarin, GPIO.IN)


def distance():
    pingtime = 0
    echotime = 0
    GPIO.output(sonarout, GPIO.LOW)
    GPIO.output(sonarout, GPIO.HIGH)
    pingtime = time.time()
    time.sleep(0.00001)
    GPIO.output(sonarout, GPIO.LOW)
    while GPIO.input(sonarin) == 0:
        pingtime = time.time()
    while GPIO.input(sonarin) == 1:
        echotime = time.time()
    if (echotime is not None) and (pingtime is not None):
        elapsedtime = echotime - pingtime
        distance = elapsedtime * 17000
    else:
        distance = 0
    return distance


def Centersensor():

    csens = GPIO.input(middle)

    if csens == 0:
        return True

def Forward():
	GPIO.output(ain1, GPIO.LOW)
	GPIO.output(ain2, GPIO.HIGH)
	GPIO.output(bin1, GPIO.HIGH)
	GPIO.output(bin2, GPIO.LOW)
	leftmotor.start(0)
	rightmotor.start(0)
	leftmotor.ChangeDutyCycle(50)
	rightmotor.ChangeDutyCycle(50)

def Backward():
	GPIO.output(ain1, GPIO.HIGH)
	GPIO.output(ain2, GPIO.LOW)
	GPIO.output(bin1, GPIO.LOW)
	GPIO.output(bin2, GPIO.HIGH)
	leftmotor.start(0)
	rightmotor.start(0)
	leftmotor.ChangeDutyCycle(100)
	rightmotor.ChangeDutyCycle(100)

def Slowleft():
	GPIO.output(ain1, GPIO.HIGH)
	GPIO.output(ain2, GPIO.LOW)
	GPIO.output(bin1, GPIO.HIGH)
	GPIO.output(bin2, GPIO.LOW)
	leftmotor.start(0)
	rightmotor.start(0)
	leftmotor.ChangeDutyCycle(40)
	rightmotor.ChangeDutyCycle(40)


while True:
	if Centersensor() is not True:
		while Centersensor() is not True:
			Backward()
	else:
		while distance() < 100:
			if Centersensor() is not True:
				break
			Forward()
		while distance() >= 50:
			Slowleft()
			time.sleep(0.1)



